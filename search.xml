<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ORID (1)</title>
      <link href="/td-blog/2020/01/05/orid-1/"/>
      <url>/td-blog/2020/01/05/orid-1/</url>
      
        <content type="html"><![CDATA[<h4 id="Period"><a href="#Period" class="headerlink" title="Period"></a>Period</h4><p>2020/01/01 - 2020/01/05</p><h4 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h4><ul><li><p><a href="https://www.udemy.com/course/master-the-coding-interview-data-structures-algorithms/" target="_blank" rel="noopener">Master the Coding Interview: Data Structures + Algorithms</a>: 看完了 5 個 sections，包含 <code>Introduction</code>, <code>Big O</code>, <code>Data Structures: Introduction</code>, <code>Arrays</code>, <code>Hash Tables</code> </p></li><li><p><a href="https://www.amazon.com/Node-js-Right-Way-Server-Side-JavaScript-ebook/dp/B079PZ2XY8/ref=sr_1_1?keywords=Node.js+8+the+Right+Way&qid=1578235619&s=digital-text&sr=1-1" target="_blank" rel="noopener">Node.js 8 the Right Way</a>: 看完 3 個 sections，包含 <code>Getting Started</code>, <code>Wrangling the File System</code>, <code>Networking with Sockets</code></p></li><li><p><a href="https://www.udemy.com/course/nodejs-master-class/" target="_blank" rel="noopener">Node.js: The Complete Guide to Build RESTful APIs (2018)</a>: 看完 <code>Section 2: Node Module System</code></p></li><li><p>對於 Node.js 當中的一些 modules 開始有一些了解，像是</p><ul><li>EventEmitter</li><li>Buffer</li><li>Stream</li><li>Child Procuss </li></ul></li></ul><h4 id="Reflective"><a href="#Reflective" class="headerlink" title="Reflective"></a>Reflective</h4><ul><li>短短幾天就又開了很多眼界，覺得開心</li><li>喜歡 Master the Coding Interview 這堂課的設計（雖然當初是隨便選來看的），先談資料結構，後談演算法。我的想法是，演算法是解決問題的思路與方法，但是如果先知道有哪些工具（資料結構）可以使用，應該會有顯著的差別（譬如 array &amp; hash 在某些行為上的 Big O 就差很多）</li><li>承上，更喜歡的是自己建立一個資料結構的 class 的過程</li><li>Node.js 8 the Right Way 忘記是哪位老師推薦給我看的（可能是 Daniel），章節看似簡短，但是卻快速帶過許多 Node.js 的重要內容，譬如 EventEmitter, Stream, Buffer, Child Process … 等，開了很多眼界，但覺得實在招架不住。花了很多時間查資料</li><li>承上，最後找了一個之前亂買的課程 Node.js: The Complete Guide to Build RESTful APIs (2018)來看。這個課程比較特別的是，裡面有一個 section 專門講解 Node modules。我覺得講解得還不錯</li></ul><h4 id="Interpretive"><a href="#Interpretive" class="headerlink" title="Interpretive"></a>Interpretive</h4><ul><li>比起自己在網路上找 documentation or tutorial，Udemy 上面的影片有時候還是比較 friendly 一點，但重點是自己要有能力判斷哪些內容是真的有幫助的，然後挑著看，作為目前自己的知識架構補充。（目前還是不認為單一門 Udemy 的課程可以幫助我建立一個完整的知識架構，but let’s see）</li><li>Node.js 8 the Right Way 的範例程式碼很簡短，但也很快的讓我知道我還不懂的東西，像是最基本的「電腦如何處理資料」這件事情，其實我不是很了解像是<ul><li>程式如何接收和處理不同的 input，像是 TCP stream, File stream, 以及來自不同 interface 的 user input？</li><li>電腦和電腦之間如何建立連線？</li><li>Node.js 中 Stream and Buffer 的運作？</li><li>Node.js 如何操作記憶體？</li></ul></li></ul><h4 id="Decisional"><a href="#Decisional" class="headerlink" title="Decisional"></a>Decisional</h4><p>下週預計進度</p><ul><li>Master the Coding Interview: 看完 <code>Linked List</code>, <code>Stacks + Queues</code>, <code>Trees</code>, <code>Graphs</code></li><li>Node.js 8 the Right Way: 看完 <code>Connecting Robust Microservices</code></li><li>瞭解電腦如何建立連線 (TCP/IP 連線)</li><li>看一下 JavaScript: Understanding the Weird Parts</li><li>看一下 AC 畢業考技術考題</li><li>找一下 database 相關的學習資源</li><li>重新思考一下學習內容與進度安排。如果按照目前看到的 scope 跟速度，應該無法在預期的時間點出關。學習固然開心，但是還是需要目標導向。 <code>我認為需要找到特定的議題/問題</code></li></ul><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Reviews </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Data Structure </tag>
            
            <tag> Node.js </tag>
            
            <tag> ORID </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data structure - hash table</title>
      <link href="/td-blog/2020/01/05/data-structures-algorithms-4/"/>
      <url>/td-blog/2020/01/05/data-structures-algorithms-4/</url>
      
        <content type="html"><![CDATA[<h4 id="note"><a href="#note" class="headerlink" title="note"></a>note</h4><ul><li>Pros<ul><li>和 array 比起來，hash table 的優勢在 <code>insert</code> 和 <code>delete</code> ，都是 O(1)，但是如果遇到 collisions 的狀況，就可能變成 O(n)</li><li>improve time complexity</li></ul></li><li>Cons<ul><li>unordered</li><li>slow key iteration</li><li>increase space complexity</li></ul></li></ul><h4 id="Create-a-hash-table"><a href="#Create-a-hash-table" class="headerlink" title="Create a hash table"></a>Create a hash table</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(size) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data = <span class="keyword">new</span> <span class="built_in">Array</span>(size)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 利用 hash 建立位址</span></span><br><span class="line">  _hash(key) &#123;</span><br><span class="line">    <span class="keyword">let</span> hash = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; key.length; i++) &#123;</span><br><span class="line">      hash = (hash + key.charCodeAt(i) * i) % <span class="keyword">this</span>.data.length</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hash</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span>(key, value) &#123;</span><br><span class="line">    <span class="keyword">let</span> address = <span class="keyword">this</span>._hash(key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.data[address]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.data[address] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.data[address].push([key, value])</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span>(key) &#123;</span><br><span class="line">    <span class="keyword">let</span> address = <span class="keyword">this</span>._hash(key)</span><br><span class="line">    <span class="keyword">const</span> currentBucket = <span class="keyword">this</span>.data[address]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentBucket) &#123;</span><br><span class="line">      <span class="comment">// deal with collisions</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; currentBucket.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (currentBucket[i][<span class="number">0</span>] === key) &#123;</span><br><span class="line">          <span class="keyword">return</span> currentBucket[i][<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  keys() &#123;</span><br><span class="line">    <span class="keyword">const</span> keyArray = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.data.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.data[i]) &#123;</span><br><span class="line">        keyArray.push(<span class="keyword">this</span>.data[i][<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> keyArray</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 hash table</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myHashTable = <span class="keyword">new</span> HashTable(<span class="number">50</span>)</span><br><span class="line">myHashTable.set(<span class="string">'apple'</span>, <span class="number">100</span>)</span><br><span class="line">myHashTable.set(<span class="string">'bird'</span>, <span class="number">200</span>)</span><br><span class="line">myHashTable.set(<span class="string">'cider'</span>, <span class="number">300</span>)</span><br><span class="line"><span class="built_in">console</span>.log(myHashTable.data)</span><br></pre></td></tr></table></figure><p>會得到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="xml"><span class="tag">&lt;<span class="name">14</span> <span class="attr">empty</span> <span class="attr">items</span>&gt;</span>,</span></span><br><span class="line"><span class="xml">  [ [ 'apple', 100 ], [ 'cider', 300 ] ],   // collision here</span></span><br><span class="line">  &lt;18 empty items&gt;,</span><br><span class="line">  [ [ 'bird', 200 ] ],</span><br><span class="line">  &lt;16 empty items&gt; ]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About Node.js (2)</title>
      <link href="/td-blog/2020/01/05/node-the-right-way-2/"/>
      <url>/td-blog/2020/01/05/node-the-right-way-2/</url>
      
        <content type="html"><![CDATA[<h4 id="Wrapping-function"><a href="#Wrapping-function" class="headerlink" title="Wrapping function"></a>Wrapping function</h4><p>平常我們在寫 module 的時候像是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//xxx</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = calculate</span><br></pre></td></tr></table></figure><p>但其實 Node.js 在外層包了一個 function</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">exports, require, module, __filename, __dirname</span>)</span>&#123;  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//xxx</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">module</span>.exports = calculate</span><br><span class="line"></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>在 Node.js 當中的任何一個檔案裡面可以用 console.log 來查看 <code>exports</code>, <code>require</code>, <code>module</code>, <code>__filename</code>, <code>__dirname</code> 這些變數</p><h4 id="Extent-EventEmitter"><a href="#Extent-EventEmitter" class="headerlink" title="Extent EventEmitter"></a>Extent EventEmitter</h4><p>假如目前有兩個檔案</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>)</span><br><span class="line"><span class="keyword">const</span> emitter = <span class="keyword">new</span> EventEmitter()</span><br><span class="line"><span class="keyword">const</span> log = <span class="built_in">require</span>(<span class="string">'./logger.js'</span>)</span><br><span class="line"></span><br><span class="line">emitter.on(<span class="string">'messageLogged'</span>, data =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Listener caleed '</span>, data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">log(<span class="string">'message'</span>)</span><br></pre></td></tr></table></figure><p>and </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// logger.js</span></span><br><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>)</span><br><span class="line"><span class="keyword">const</span> emitter = <span class="keyword">new</span> EventEmitter()</span><br><span class="line"><span class="keyword">let</span> url = <span class="string">'https://tsungtingdu.github.io/td-blog/'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(message)</span><br><span class="line">  emitter.emit(<span class="string">'meesageLogged'</span>, &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    url: url</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果啟動 <code>node app.js</code> 後，原本期待可以接收到從 logger.js emit 出來的 event，但結果不行。需要改成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> Logger = <span class="built_in">require</span>(<span class="string">'./logger.js'</span>)</span><br><span class="line"><span class="keyword">const</span> logger = <span class="keyword">new</span> Logger()</span><br><span class="line"></span><br><span class="line">logger.on(<span class="string">'messageLogged'</span>, e =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>and</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// logger.js</span></span><br><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>)</span><br><span class="line"><span class="keyword">let</span> url = <span class="string">'https://tsungtingdu.github.io/td-blog/'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  log(message) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(message)</span><br><span class="line">    <span class="keyword">this</span>.emit(<span class="string">'messageLogged'</span>, &#123;</span><br><span class="line">      id: <span class="number">1</span>,</span><br><span class="line">      url: url</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = Logger</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About Node.js (1)</title>
      <link href="/td-blog/2020/01/04/node-the-right-way-1/"/>
      <url>/td-blog/2020/01/04/node-the-right-way-1/</url>
      
        <content type="html"><![CDATA[<h4 id="note"><a href="#note" class="headerlink" title="note"></a>note</h4><ul><li>Node.js 的設計是適合 I/O intensive 的工作任務，而非 CPU intensive</li><li>I/O bound<ul><li>client-side (GUI, web, mobile, etc..)</li><li>server-side (web, REST, Ajax, HTTP, and messaging, IPC, monitoring, test, build, distributed, etc.. )</li></ul></li><li>Thinking beyond the web - Node.js 可以用來處理很多工作，譬如 IoT</li><li>Many middleware tasks are I/O-bound (just like client-side scripting and databases)</li><li>About Node.js<ul><li>event loop</li><li>single-threaded &amp; highly parallel</li><li>non-blocking (callback)</li><li>backwardism</li></ul></li><li>Global objects</li><li>Important modules in Node.js<ul><li>EventEmitter</li><li>Buffer</li><li>Stream</li><li>Child Process</li></ul></li></ul><hr><h4 id="Events-amp-EventEmitter"><a href="#Events-amp-EventEmitter" class="headerlink" title="Events (&amp; EventEmitter)"></a>Events (&amp; EventEmitter)</h4><p>Node.js 的設計重點為事件驅動，其中一個最重要的 module 就是 Event。許多 Node.js 裡面的 module 都是繼承/來自於Event 中的 class “EventEmitter”。舉例來說，如果去看 HTTP module 的文件，可以看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class: http.ClientRequest</span><br><span class="line">Extends: &lt;Stream&gt;</span><br></pre></td></tr></table></figure><p>然後點進 Stream 會看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">All streams are instances of EventEmitter.</span><br></pre></td></tr></table></figure><p>另外也可以在不同的 module 當中，看到他們會產生 (emit) 的 event 類型</p><p>EventEmitter 有幾個常見的方法像是</p><ul><li>emitter.on(eventName, listener)</li><li>emitter.once(eventName, listener)</li></ul><p>等等</p><h4 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h4><blockquote><p><em>Pure JavaScript is Unicode friendly, but it is not so for binary data. While dealing with TCP streams or the file system, it’s necessary to handle octet streams. Node provides Buffer class which provides instances to store raw data similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap.</em></p></blockquote><p>簡單來說，原本的 JavaScript 只能處理 Unicode (string) data，不擅長處理 binary data。但在 TCP 或 file system (fs) 都是 binary data，因此 Node.js 引入了 buffer 來負責處理 binary data stream。</p><p>所以 buffer 是 binary data，在 V8 heap 之外由 Buffer class 來管理。另外，Buffer 是global class，因此使用的時候不需要 require buffer module</p><p>Example</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buf = <span class="keyword">new</span> Buffer.from(<span class="string">'This is a book'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(buf)</span><br></pre></td></tr></table></figure><p>會得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Buffer 54 68 69 73 20 69 73 20 61 20 62 6f 6f 6b&gt;</span><br></pre></td></tr></table></figure><p>如果把剛剛的 buf 轉成 json，轉成 buffer 後再轉成字串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> json = <span class="built_in">JSON</span>.stringify(buf)</span><br><span class="line"><span class="keyword">let</span> buf2 = <span class="keyword">new</span> Buffer.from(<span class="built_in">JSON</span>.parse(json).data)</span><br><span class="line"><span class="built_in">console</span>.log(buf2.toString())</span><br></pre></td></tr></table></figure><p>會得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a book</span><br></pre></td></tr></table></figure><h4 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h4><p>剛剛提到，stream 是 EventEmitter 的 instance，而許多 Node.js module 則是 stream 的 instance，譬如 <code>process.stdout</code>, <code>http.clientRequest</code> 等等</p><p>stream 是一種資料處理方法，讓我們在讀取大型資料的時候，能夠將資料將資料變成多個連續的 chunk ，分批寫入記憶體當中，以免記憶體被大型資料一口氣佔滿。因此使用 stream 的好處是</p><ul><li>提升記憶體的使用效率</li><li>提升時間效率，在檔案全部讀取完畢之前，就能先開始處理先到的 data chunk</li></ul><p>stream 主要有以下四種</p><ul><li>Writable streams</li><li>Readable streams </li><li>Duplex streams (可讀可寫)</li><li>Transform streams</li></ul><p>以及四種主要的 events</p><ul><li>data - 當有 data 可以讀取時</li><li>end - 沒有數據可讀時</li><li>error</li><li>finish - 所有數據已經被寫入時</li></ul><h4 id="Child-Process"><a href="#Child-Process" class="headerlink" title="Child Process"></a>Child Process</h4><p>Node.js 的特色是 single-thread，但是如果有需要也可以額外開出 stread。譬如在 app.js 當中用 spawn 開啟一個 child process</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> childProcess = spawn(<span class="string">'node'</span>, [<span class="string">'app2.js'</span>])</span><br></pre></td></tr></table></figure><p>因此用 <code>node app.js</code> 啟動 server 時，同步也會執行 <code>node app2.js</code></p><h4 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h4><ul><li>arrow functions have another big advantage over their ancestral counterparts: they do not create a new scope for <strong>this</strong></li></ul><hr><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><ul><li><a href="https://stackoverflow.com/questions/868568/what-do-the-terms-cpu-bound-and-i-o-bound-mean" target="_blank" rel="noopener">What do the terms “CPU bound” and “I/O bound” mean?</a></li><li><a href="https://bytearcher.com/articles/io-vs-cpu-bound/" target="_blank" rel="noopener">I/O-bound vs CPU-bound in Node.js</a></li><li><a href="https://jscomplete.com/learn/node-beyond-basics#streams-101" target="_blank" rel="noopener">Node’s Streams</a></li><li><a href="https://www.freecodecamp.org/news/node-js-child-processes-everything-you-need-to-know-e69498fe970a/" target="_blank" rel="noopener">Node.js Child Processes: Everything you need to know</a></li><li><a href="https://nodejs.org/dist/latest-v13.x/docs/api/" target="_blank" rel="noopener">Node.js v13.5.0 APIs</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data structure - array</title>
      <link href="/td-blog/2020/01/03/data-structures-algorithms-3/"/>
      <url>/td-blog/2020/01/03/data-structures-algorithms-3/</url>
      
        <content type="html"><![CDATA[<h4 id="note"><a href="#note" class="headerlink" title="note"></a>note</h4><ul><li>static v.s. dynamic array: 是否佔用有限空間</li><li>Pros<ul><li>fast lookups <code>O(1)</code></li><li>fast push/pop <code>O(1)</code></li><li>ordered</li></ul></li><li>Cons<ul><li>slow inserts <code>O(n)</code></li><li>slow deletes <code>O(n)</code></li><li>fixed size (if it’s a static array)</li></ul></li></ul><h4 id="Create-an-array"><a href="#Create-an-array" class="headerlink" title="Create an array"></a>Create an array</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.data = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span>(index) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data[index]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  push(item) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data[<span class="keyword">this</span>.length] = item</span><br><span class="line">    <span class="keyword">this</span>.length++</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">const</span> lastItem = <span class="keyword">this</span>.data[<span class="keyword">this</span>.length<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.data[<span class="keyword">this</span>.length<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">this</span>.length--</span><br><span class="line">    <span class="keyword">return</span> lastItem</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>(index) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = <span class="keyword">this</span>.data[index]</span><br><span class="line">    <span class="keyword">this</span>.shiftItems(index)</span><br><span class="line">    <span class="keyword">return</span>  item</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  shiftItems(index) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = index; i &lt; <span class="keyword">this</span>.length<span class="number">-1</span>; i++)&#123;</span><br><span class="line">      <span class="keyword">this</span>.data[i] = <span class="keyword">this</span>.data[i+<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.data[<span class="keyword">this</span>.length<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">this</span>.length--</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About data structure</title>
      <link href="/td-blog/2020/01/03/data-structures-algorithms-2/"/>
      <url>/td-blog/2020/01/03/data-structures-algorithms-2/</url>
      
        <content type="html"><![CDATA[<h4 id="note"><a href="#note" class="headerlink" title="note"></a>note</h4><ul><li>不同的 data structure 就像是不同的容器，在不同的用途上有各自的優點與缺點</li><li>常見的 data structure 有<ul><li>array</li><li>stacks</li><li>queues</li><li>linked list</li><li>trees</li><li>tries</li><li>graphs</li><li>hash tables</li></ul></li><li>Fundamental behaviors<ul><li>access</li><li>insert</li><li>delete</li><li>find</li><li>sort</li><li>traverse</li></ul></li><li>並不是每一種程式語言都有內建所有的 data structure，但假如沒有，其實也可以自己建立新的 data structure</li></ul><h4 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h4><ul><li>A collection of 8 bits is called a byte</li><li>CPU 存取 RAM 的資料需要透過 Memory Controller Chip 來存取</li><li>儲存資料的地方有<ul><li>Registers</li><li>On-Chip Cache</li><li>Second Level Cache</li><li>Main Memory (DRAM)</li><li>Secondary Storage (Disk)</li><li>Teritory Storage (Tape)</li></ul></li><li>關於存放位置<ul><li>stack</li><li>heap</li><li>global</li></ul></li></ul><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><ul><li><a href="https://medium.com/omarelgabrys-blog/data-structures-language-support-5f70f8312e84" target="_blank" rel="noopener">Data Structures — Language Support (Part 3)</a></li><li><a href="https://medium.com/omarelgabrys-blog/algorithms-data-structures-series-85ec94eb8aff" target="_blank" rel="noopener">Algorithms &amp; Data Structures Series</a></li><li><a href="https://www.youtube.com/watch?v=fpnE6UAfbtU" target="_blank" rel="noopener">Registers and RAM: Crash Course Computer Science #6</a></li><li><a href="https://www.youtube.com/watch?v=PVad0c2cljo" target="_blank" rel="noopener">RAM Explained - Random Access Memory</a></li><li><a href="http://wsfdl.com/linux/2016/06/11/%E7%90%86%E8%A7%A3CPU%E7%9A%84cache.html" target="_blank" rel="noopener">理解 CPU Cache</a></li><li><a href="https://inst.eecs.berkeley.edu/~cs162/archives.html" target="_blank" rel="noopener">CS162 Operating Systems and Systems Programming</a></li><li><a href="https://nwpie.blogspot.com/2017/05/5-stack-heap.html" target="_blank" rel="noopener">[探索 5 分鐘] stack 與 heap 的底層概念</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About Big O</title>
      <link href="/td-blog/2020/01/02/data-structures-algorithms-1/"/>
      <url>/td-blog/2020/01/02/data-structures-algorithms-1/</url>
      
        <content type="html"><![CDATA[<h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><ul><li>好的程式碼需要 <strong>Readable</strong> &amp; <strong>Scalable</strong></li><li>要知道程式是否 scalable，可以從 <strong>time complexity</strong> &amp; <strong>space complexity</strong> 來衡量</li><li>Readibility, time complexity, space complexity 三者會互相 trade off</li><li>要計算 runtime，可以實際去計算一個程式的執行時間，但這會因不同的電腦的 CPU 有所差別。因此實務上，會去計算「會跑過多少行程式碼」，用 Big O 來說明程式的 time complexity</li><li>Rules for calculating Big O:<ul><li>Worst Case</li><li>Remove constant</li><li>Different input</li><li>Drop non-dominants</li></ul></li></ul><h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><p>O(n)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findKeyWord</span> (<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array[i] === <span class="string">'a'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Found a'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">findKeyWord(array) <span class="comment">//O(n)</span></span><br></pre></td></tr></table></figure><p>O(1)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printFirstItem</span> (<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(array[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printFirstItem(array) <span class="comment">//O(1)</span></span><br></pre></td></tr></table></figure><p>O(n^2)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logAllPairs</span> (<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; array.length<span class="number">-1</span>; j++) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(array[i], array[j])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ogAllPairs(array) <span class="comment">//O(n^2)</span></span><br></pre></td></tr></table></figure><p>O(log n)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">31415926</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumOfDigits</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    sum += n % <span class="number">10</span></span><br><span class="line">    n = <span class="built_in">Math</span>.floor(n/<span class="number">10</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sumOfDigits(num) <span class="comment">//O(log n)</span></span><br></pre></td></tr></table></figure><p>O(a+b)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</span><br><span class="line"><span class="keyword">const</span> b = [<span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loopTwoArray</span> (<span class="params">array1, array2</span>) </span>&#123;</span><br><span class="line">  array1.forEach( <span class="function"><span class="params">i</span> =&gt;</span> <span class="built_in">console</span>.log(i) )</span><br><span class="line">  array2.forEach( <span class="function"><span class="params">i</span> =&gt;</span> <span class="built_in">console</span>.log(i) )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loopTwoArray(a,b) <span class="comment">//O(a+b)</span></span><br></pre></td></tr></table></figure><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><ul><li><a href="https://www.bigocheatsheet.com/" target="_blank" rel="noopener">Big-O Cheat Sheet</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 年回顧 (2/2)</title>
      <link href="/td-blog/2020/01/01/start-2/"/>
      <url>/td-blog/2020/01/01/start-2/</url>
      
        <content type="html"><![CDATA[<p><a href="/td-blog/2019/12/31/Start/">上篇：2019 年回顧 (1/2)</a></p><h3 id="學習"><a href="#學習" class="headerlink" title="學習"></a>學習</h3><h4 id="Knowing-Myself"><a href="#Knowing-Myself" class="headerlink" title="Knowing Myself"></a>Knowing Myself</h4><p>2018 年做的 <a href="https://www.gallup.com/cliftonstrengths/en/strengthsfinder.aspx" target="_blank" rel="noopener">StrengthsFinder</a> 第一次讓我更清楚的看到我自己，雖然很有可能是種自我實現預言，但至少有個很明確的 anchor 與方向，讓我更有信心擁抱自己的優勢。2019 年是個有許多變動的一年，因此過程中，有很多機會去審視自己。希望未來對於自己能夠有更深入的認識，找到安身立命之本</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><ul><li>2019 在泰國跨年</li><li>陳綺貞20週年演唱會（台北）</li><li>去了 Penang, Malaysia</li><li>去了 Kluang, Malaysia</li><li>覺醒音樂祭（嘉義）</li><li>親手製作求婚戒指＆求婚成功</li><li>去了 KL, Malaysia 參加天空音樂節</li><li>32歲生日在 Marina Bay Sands staycation</li><li>看了新加坡國慶煙火＆跨年煙火</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>年初從泰國回來後中流感，沒有吃克流感，所以燒了一週，很怕上不了回台灣的飛機。超級痛苦的體驗</li><li>搭 Scoot 從新加坡回台灣的路上，氧氣面罩掉落，差點以為自己看不到 2020 的跨年煙火了 (<a href="https://www.straitstimes.com/asia/east-asia/scoot-flight-from-singapore-to-taipei-experiences-drop-in-cabin-pressure-oxygen-masks" target="_blank" rel="noopener">新聞</a>)</li><li>在家樓下被一隻名叫 Henry 的蜜蜂蜇到，打了抗過敏的針之後馬上睡著；隔天也因為吃抗過敏的藥昏昏沈沈</li><li>參與了新加坡一些建案的翻譯工作，所以有些建案的報紙廣告標題與內容、網站、手冊等內容的部分文字是我幫忙想的喔</li><li>嘗試做了一些料理，像是 tiramisu（好像還不錯）、日式咖哩、馬鈴薯燉肉、關東煮、人參雞湯、薑母鴨等等</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Reviews </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 年回顧 (1/2)</title>
      <link href="/td-blog/2019/12/31/Start/"/>
      <url>/td-blog/2019/12/31/Start/</url>
      
        <content type="html"><![CDATA[<p>在 2019 年的最後一天，學會用 Hexo 架了一個自己的 blog。這已經不知道是我第幾次開 blog 了，不過這次選用 Hexo 的原因，主要是希望能夠用 markdown 來撰寫，另一方面，文章可以同步在本地端以及 Github 上有備份</p><p>期待 2020 以及未來的日子，可以在這裡勤快地記錄下我的學習，以及大大小小我想要紀錄的事情</p><p>既然是 2019 年最後一天，不如就先來寫寫個回顧吧</p><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><h4 id="建立助教團隊"><a href="#建立助教團隊" class="headerlink" title="建立助教團隊"></a>建立助教團隊</h4><p>2018 年結束在新加坡的 bootcamp 後，我的工作重心就轉移到台灣的線上課程上，主要負責助教團隊的管理：從招募、培訓，到工作管理、成本控管等任務。目前助教團隊超過 30 人，一路以來有超過 50 人次擔任過助教</p><h4 id="打造助教團隊管理系統"><a href="#打造助教團隊管理系統" class="headerlink" title="打造助教團隊管理系統"></a>打造助教團隊管理系統</h4><p>在沒有技術開發團隊的支援下，我和 Walter 利用手邊有的工具加上自學，打造出團隊管理系統，讓助教團隊能夠提供學生及時的協助，滿足學習教練團隊所預期的課程體驗</p><p>系統主要包含 Admin dashboard、TA dashboard，以及成本預算管理等三個操作介面/工具</p><p>自動化功能包含</p><ul><li>助教排班系統</li><li>工作分類（根據課程班級、週數、作業標籤判斷是否需要處理）</li><li>工作分配</li><li>提醒通知（排班通知、學生回覆通知、工作逾期通知等）</li><li>資料比對計算</li></ul><p>主要使用到</p><ul><li>Python - 爬蟲與資料處理程式（主要由 Walter 負責）</li><li>Google App Script<ul><li>負責資料呈現與運算</li><li>執行 Cron job - 定期執行特定程式、打 API 接收資訊</li></ul></li><li>Ruby on Rails - 爬蟲程式與 API server</li></ul><p>其他像是</p><ul><li>Slack webhook &amp; API</li><li>Bit.ly API</li><li>Google Sheets query function (similar to SQL) 等</li></ul><h4 id="導入-Freshdesk"><a href="#導入-Freshdesk" class="headerlink" title="導入 Freshdesk"></a>導入 Freshdesk</h4><p>協助團隊導入 Freshdesk 作為客服系統，取代原先的 inbox。經歷</p><ul><li>研究並測試不同方案</li><li>設計並主持團隊測試 session，共同決定最後採用的解決方案</li><li>設計資料搬遷流程</li><li>設計使用規範、主持 training session</li></ul><p>等不同階段，最後成功導入系統，成為團隊日常營運的一部分</p><h4 id="定義-Product-Market-Fit"><a href="#定義-Product-Market-Fit" class="headerlink" title="定義 Product Market Fit"></a>定義 Product Market Fit</h4><p>最初要協助團隊重新定義產品的 product market fit，做了一些研究與使用者調查後，回歸到原先的 product roadmap 上，先共同定義出產品最重要的 metrics，以及討論針對特定 problem base 的 new ideas。最後發起 product meeting，讓團隊中每個人都能參與產品發展的討論，並有更高的視角去觀察與思考產品的未來</p><p>對我來說這是一個很特別的任務，在團隊中沒有人知道該怎麼做，因此需要自己去定義問題並尋找出路。一路上常常質問自己「到底有沒有問對問題？」，研究與討論過程中也看到許多公司對於產品的想法，但要如何將那些想法應用在自家的產品上，中間需要跟團隊成員有很多的討論、意見交流，並凝聚共識</p><h4 id="不同的工作型態-remote-amp-part-time"><a href="#不同的工作型態-remote-amp-part-time" class="headerlink" title="不同的工作型態: remote &amp; part-time"></a>不同的工作型態: remote &amp; part-time</h4><p>因為種種原因，2019 三月底開始就轉為 part-time 工作者，這時候才發現時間管理的重要性。變成 part-time 之後，會更為認真的去思考工作的安排與時間投入，而我總是會投入許多的心力在工作上，不知不覺工作的比例就會超過原先對於 part-time 的設想。要如何「設下工作的邊界」、「提高工作效率」，都是未來需要思考與練習的課題</p><p>另外，也工作的重心與對象都在台灣，因此我不知不覺就成了一位 remote 工作者，每天在不同的咖啡店、圖書館等地方工作，也有機會去探索城市的不同角落，生活也多了些樂趣。但是同時會失去另一部分的方便性，譬如常常要去想哪裡有網路、電力、水、廁所等等，跑來跑去的過程中，其實也會花費掉不少的時間</p><p>跟在辦公室的工作者比起來，remote 工作者接收資訊的效率是遠遠落後。舉例來說，在一個會議上，除了語音資訊之外，其實也可以透過與會者的表情、肢體語言來收集到更多資訊與細節，更不用說會議前與會議後的小聊，這些都是 remote 工作者很難參與到的地方</p><hr><h3 id="學習"><a href="#學習" class="headerlink" title="學習"></a>學習</h3><h4 id="Web-Dev-JavaScript-amp-Node-js"><a href="#Web-Dev-JavaScript-amp-Node-js" class="headerlink" title="Web Dev (JavaScript &amp; Node.js)"></a>Web Dev (JavaScript &amp; Node.js)</h4><p>其實今年初才認真開始學 JavaScript（以前都是寫 Ruby），年中開始加入自家的 web dev 課程，一路上完第三學期、第四學期，並完成畢業專案通過口試</p><p>雖然之前學過 Ruby on Rails，但是學 JavaScript &amp; Node.js 後，對於 web dev 有了重新的認識，覺得非常有趣，期待 2020 年能夠有更深入的學習</p><h4 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h4><p>一開始本來只是想自己學一下而已，後來因為揪團參加iT邦幫忙鐵人賽，因此就把剛剛開始學的這個主題拿來當參賽題目（結果當然是非常痛苦）</p><p>雖然後來沒有時間繼續深入學習 Machine Learning，不過過程中為了學 Python，花了不到一天的時間看完語法後，就直接上 Leetcode 玩，效果好像還不錯</p><p><a href="/td-blog/2020/01/01/start-2/">繼續閱讀下篇：2019 年回顧 (2/2)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Reviews </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
